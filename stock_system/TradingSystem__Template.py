###################################################################################################
# Trading System replication:
#
###################################################################################################
import numpy as np
from sklearn.preprocessing import Imputer
import inspect
import talib
from stock_system.TradingSystem import TradingSystem
from stock_system import TA, ModelUtils


class TradingSystem_Comp(TradingSystem):
    '''
    Parent class for trading systems
    '''
    def __init__(self):
        TradingSystem.__init__(self)
        self.df = None  # The source data frame - the X features
        self.target = None  # The y label target, generated by a system algorithm from X data
        self.features = []  # list of X feature columns for the trading system and implementing model

    def preprocess_data(self, data):
        '''
        Perform any data preprocessing steps such as normalizing, smoothing,
        remove correlated columns, etc
        '''
        df = data.copy()

        self.df = df

        return self.df


    def get_features(self):
        return self.features

    def feature_forensics(self, model):
        return TradingSystem.feature_forensics(self, model)

    def generate_target(self):
        '''
        Trading system goes here.
        This runs the trading system on the training data to generate the y label.

        **** CAVEAT ****
        If target is price change over n days, you need to shift the y label target
        by n days (at least one day) to ensure no future leak.

        Returns a dataframe with the y label column, ready to use in a model for fit and predict.
        '''
        if self.df is None:
            print 'This trading system has no data.  Call preprocess_data first.'
            return

        # Target is a ... (eg, n period change)
        days_ahead = -1
        gain_loss = np.roll(self.df['close'], days_ahead) - self.df['close']
        self.df['y_true'] = (gain_loss >= 0).astype(int)

        return self.df
