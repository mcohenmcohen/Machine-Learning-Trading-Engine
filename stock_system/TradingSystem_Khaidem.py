###################################################################################################
# Parent class for trading systems
###################################################################################################
import numpy as np
from minepy import MINE
from sklearn.feature_selection import RFE
import inspect
from stock_system.TradingSystem import TradingSystem
from stock_system import TA, ModelUtils


class TradingSystem_Khaidem(TradingSystem):
    '''
    Parent class for trading systems
    '''
    def __init__(self):
        TradingSystem.__init__(self)
        self.df = None  # The source data frame - the X features
        self.target = None  # The y label target, generated by a system algorithm from X data
        self.features = []  # list of X feature columns for the trading system and implementing model

    def preprocess_data(self, df):
        '''
        Perform any data preprocessing steps such as normalizing, smoothing,
        remove correlated columns, etc
        '''
        df = TA.run_exp_smooth(df, alpha=.5)
        df = TA.run_techicals(df)

        # Impute - delete rows with Nan and null.  Will be the first several rows
        for name in df.columns:
            df = df[df[name].notnull()]

        self.df = df

        return self.df


    def get_features(self):
        self.features = ['roc', 'rsi', 'willr', 'obv', 'stok']
        # Oscilators
        # x_osc = ['rsi', 'cci', 'stod', 'stok', 'willr']
        # x_oscd_cols = ['rsi_d', 'cci_d', 'stod_d', 'stok_d', 'willr_d']
        # # MAs
        # x_ma_cols = ['sma20', 'sma50', 'sma200', 'wma10', 'macd_d']
        # x_all_dscrete_cols = ['roc_d', 'rsi_d', 'cci_d', 'stod_d', 'stok_d', 'willr_d', 'mom_d']
        # #x_cols = ['roc', 'rsi', 'willr', 'obv', 'stok']#'mom', , 'cci',  'stod', 'macd', 'sma', 'sma50', 'wma']
        # #x_cols = ['roc']
        # x_cols = x_all_dscrete_cols + x_ma_cols
        return self.features


    def generate_target(self):
        '''
        Trading system goes here.
        This runs the trading system on the training data to generate the y label.

        Returns a dataframe with the y label column, ready to use in a model for fit and predict.
        '''
        if self.df is None:
            print 'This trading system has no data.  Call preprocess_data first.'
            return

        # Number of days ahead to see if the price moved up or down
        days_ahead = -1
        self.df['gain_loss'] = np.roll(self.df['close'], days_ahead) - self.df['close']
        self.df['y_true'] = (self.df['gain_loss'] >= 0).astype(int)
        # Drop the last row?
        self.df = self.df[:-1]

        return self.df

    def check_corr(self):
        '''
        Get/print a correlation matrix to assist in identifying correlated columns
        '''
        df = self.df.copy()

        df = df.select_dtypes(['number'])  # Use only numeric columns
        print("Correlation Matrix")
        print(df.corr())
        print()

        def get_redundant_pairs(df):
            '''
            Get/print diagonal and lower triangular pairs of correlation matrix
            '''
            pairs_to_drop = set()
            cols = df.columns
            for i in range(0, df.shape[1]):
                for j in range(0, i+1):
                    pairs_to_drop.add((cols[i], cols[j]))
            return pairs_to_drop

        def get_top_abs_correlations(df, n=5):
            au_corr = df.corr().abs().unstack()
            labels_to_drop = get_redundant_pairs(df)
            au_corr = au_corr.drop(labels=labels_to_drop).sort_values(ascending=False)
            return au_corr[0:n]

        print("Top Absolute Correlations")
        print(get_top_abs_correlations(df, 100))

    def check_mic(self):
        '''
        Get/print maximal information coefficient
        - Indicates features that have a high MIC with respect to the target variable.
          Stock data probably wont have much given the noisyness
          (ref - http://minepy.sourceforge.net/docs/1.0.0/python.html)

        x - one feature
        y - target

        TODO - float to int bug
        '''

        def print_stats(mine):
            print "MIC", mine.mic()
            print "MAS", mine.mas()
            print "MEV", mine.mev()
            print "MCN (eps=0)", mine.mcn(0)
            print "MCN (eps=1-MIC)", mine.mcn_general()

        x = self.df[self.x_cols]
        try:
            y = self.df['target']
        except KeyError:
            print "%s.%s: Data has no 'target' column.  Exiting." % (__name__, inspect.currentframe().f_code.co_name)
            return
        mine = MINE(alpha=0.6, c=15)
        mine.compute_score(x, y)

        print "Without noise:"
        print_stats(mine)
        print

        np.random.seed(0)
        y += np.random.uniform(-1, 1, x.shape[0]) # add some noise
        mine.compute_score(x, y)

        print "With noise:"
        print_stats(mine)
